=begin
#Social Graph API

#Pho Networks REST API

OpenAPI spec version: 1.1.1
Contact: emre@phonetworks.org
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module PhoClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # updates (or creates) an attribute
    # Works with all entities, including nodes and edges. Given its key, updates an  attribute value, or creates it, if it doesn't yet exist. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :value The value to update the key with.
    # @return [InlineResponse2004]
    def add_attribute(opts = {})
      data, _status_code, _headers = add_attribute_with_http_info(opts)
      return data
    end

    # updates (or creates) an attribute
    # Works with all entities, including nodes and edges. Given its key, updates an  attribute value, or creates it, if it doesn&#39;t yet exist. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :value The value to update the key with.
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def add_attribute_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.add_attribute ..."
      end
      # resource path
      local_var_path = "/{uuid}/attribute/{key}".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'value'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deletes an attribute
    # Works with all entities, including nodes and edges. Given its key, deletes an  attribute. 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def del_attribute(opts = {})
      data, _status_code, _headers = del_attribute_with_http_info(opts)
      return data
    end

    # deletes an attribute
    # Works with all entities, including nodes and edges. Given its key, deletes an  attribute. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def del_attribute_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.del_attribute ..."
      end
      # resource path
      local_var_path = "/{uuid}/attribute/{key}".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#del_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deletes an entity
    # Works with all entities, including nodes and edges.  
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def del_entity(opts = {})
      del_entity_with_http_info(opts)
      return nil
    end

    # deletes an entity
    # Works with all entities, including nodes and edges.  
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def del_entity_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.del_entity ..."
      end
      # resource path
      local_var_path = "/{uuid}".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#del_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves the edges of a node
    # By passing in a node ID, you can fetch all the edges of the node in question; including incoming and outgoing. 
    # @param uuid The node ID
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def get_all_edges(uuid, opts = {})
      data, _status_code, _headers = get_all_edges_with_http_info(uuid, opts)
      return data
    end

    # retrieves the edges of a node
    # By passing in a node ID, you can fetch all the edges of the node in question; including incoming and outgoing. 
    # @param uuid The node ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Fixnum, Hash)>] InlineResponse2003 data, response status code and response headers
    def get_all_edges_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_all_edges ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.get_all_edges" if uuid.nil?
      # resource path
      local_var_path = "/{uuid}/edges/all".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2003')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_all_edges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves the value of an entity attribute
    # Attribute key must be case-sensitive. 
    # @param uuid The node ID
    # @param key The attribute key
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_attribute(uuid, key, opts = {})
      data, _status_code, _headers = get_attribute_with_http_info(uuid, key, opts)
      return data
    end

    # retrieves the value of an entity attribute
    # Attribute key must be case-sensitive. 
    # @param uuid The node ID
    # @param key The attribute key
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_attribute_with_http_info(uuid, key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_attribute ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.get_attribute" if uuid.nil?
      # verify the required parameter 'key' is set
      fail ArgumentError, "Missing the required parameter 'key' when calling DefaultApi.get_attribute" if key.nil?
      # resource path
      local_var_path = "/{uuid}/attribute/{key}".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s).sub('{' + 'key' + '}', key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves the existing attribute keys of an entity (edge or node)
    # Attribute keys are case-sensitive, and they will be listed in an array. 
    # @param uuid The node ID
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_attributes(uuid, opts = {})
      data, _status_code, _headers = get_attributes_with_http_info(uuid, opts)
      return data
    end

    # retrieves the existing attribute keys of an entity (edge or node)
    # Attribute keys are case-sensitive, and they will be listed in an array. 
    # @param uuid The node ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_attributes_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_attributes ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.get_attributes" if uuid.nil?
      # resource path
      local_var_path = "/{uuid}/attributes".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves an edge
    # By passing in an ID, you can search for available edges in the system.  
    # @param uuid The edge ID
    # @param [Hash] opts the optional parameters
    # @return [Edge]
    def get_edge(uuid, opts = {})
      data, _status_code, _headers = get_edge_with_http_info(uuid, opts)
      return data
    end

    # retrieves an edge
    # By passing in an ID, you can search for available edges in the system.  
    # @param uuid The edge ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Edge, Fixnum, Hash)>] Edge data, response status code and response headers
    def get_edge_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_edge ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.get_edge" if uuid.nil?
      # resource path
      local_var_path = "/edge/{uuid}".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Edge')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_edge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves the edge getter methods of a node
    # By passing in a node UUID that exists in the database, you can fetch  the edge getter methods of the node in question. 
    # @param uuid The node ID
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_edge_getters(uuid, opts = {})
      data, _status_code, _headers = get_edge_getters_with_http_info(uuid, opts)
      return data
    end

    # retrieves the edge getter methods of a node
    # By passing in a node UUID that exists in the database, you can fetch  the edge getter methods of the node in question. 
    # @param uuid The node ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_edge_getters_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_edge_getters ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.get_edge_getters" if uuid.nil?
      # resource path
      local_var_path = "/{uuid}/edges/getters".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_edge_getters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves the edge setter methods of a node
    # By passing in a node UUID that exists in the database, you can fetch  the edge setter methods of the node in question. These setters may or  may not be formative. If they are formative, a new node is created in result. 
    # @param uuid The node ID
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_edge_setters(uuid, opts = {})
      data, _status_code, _headers = get_edge_setters_with_http_info(uuid, opts)
      return data
    end

    # retrieves the edge setter methods of a node
    # By passing in a node UUID that exists in the database, you can fetch  the edge setter methods of the node in question. These setters may or  may not be formative. If they are formative, a new node is created in result. 
    # @param uuid The node ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_edge_setters_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_edge_setters ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.get_edge_setters" if uuid.nil?
      # resource path
      local_var_path = "/{uuid}/edges/setters".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_edge_setters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves the Graph Founder
    # The Founder must be a \\Pho\\Framework\\Actor object.  This method returns the object type as well as object ID. 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def get_founder(opts = {})
      data, _status_code, _headers = get_founder_with_http_info(opts)
      return data
    end

    # retrieves the Graph Founder
    # The Founder must be a \\Pho\\Framework\\Actor object.  This method returns the object type as well as object ID. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def get_founder_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_founder ..."
      end
      # resource path
      local_var_path = "/founder".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_founder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves the main Graph
    # The Graph must be a \\Pho\\Lib\\Graph\\SubGraph and \\Pho\\Framework\\Graph object.  This method returns the object type as well as object ID. The Graph contains all nodes and edges in the system.  Though it is contained by Space, its one and only container. 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def get_graph(opts = {})
      data, _status_code, _headers = get_graph_with_http_info(opts)
      return data
    end

    # retrieves the main Graph
    # The Graph must be a \\Pho\\Lib\\Graph\\SubGraph and \\Pho\\Framework\\Graph object.  This method returns the object type as well as object ID. The Graph contains all nodes and edges in the system.  Though it is contained by Space, its one and only container. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Fixnum, Hash)>] InlineResponse2001 data, response status code and response headers
    def get_graph_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_graph ..."
      end
      # resource path
      local_var_path = "/graph".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2001')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_graph\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves the incoming edges of a node
    # By passing in a node ID, you can fetch  the incoming edges of the node in question. 
    # @param uuid the node ID
    # @param [Hash] opts the optional parameters
    # @return [Array<NodeEdge>]
    def get_incoming_edges(uuid, opts = {})
      data, _status_code, _headers = get_incoming_edges_with_http_info(uuid, opts)
      return data
    end

    # retrieves the incoming edges of a node
    # By passing in a node ID, you can fetch  the incoming edges of the node in question. 
    # @param uuid the node ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<NodeEdge>, Fixnum, Hash)>] Array<NodeEdge> data, response status code and response headers
    def get_incoming_edges_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_incoming_edges ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.get_incoming_edges" if uuid.nil?
      # resource path
      local_var_path = "/{uuid}/edges/in".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<NodeEdge>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_incoming_edges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves a node
    # By passing in an ID, you can search for available nodes in the system. Please note, this function will not return edges. This method  is  reserved for nodes only.  
    # @param uuid The node ID
    # @param [Hash] opts the optional parameters
    # @return [Node]
    def get_node(uuid, opts = {})
      data, _status_code, _headers = get_node_with_http_info(uuid, opts)
      return data
    end

    # retrieves a node
    # By passing in an ID, you can search for available nodes in the system. Please note, this function will not return edges. This method  is  reserved for nodes only.  
    # @param uuid The node ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def get_node_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_node ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.get_node" if uuid.nil?
      # resource path
      local_var_path = "/{uuid}".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # edge getter
    # Fetches edge results, whether as edge IDs or node IDs, depending on edge's characteristics.  
    # @param uuid The node ID
    # @param edge The edge getter label
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_node_edge(uuid, edge, opts = {})
      data, _status_code, _headers = get_node_edge_with_http_info(uuid, edge, opts)
      return data
    end

    # edge getter
    # Fetches edge results, whether as edge IDs or node IDs, depending on edge&#39;s characteristics.  
    # @param uuid The node ID
    # @param edge The edge getter label
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_node_edge_with_http_info(uuid, edge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_node_edge ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.get_node_edge" if uuid.nil?
      # verify the required parameter 'edge' is set
      fail ArgumentError, "Missing the required parameter 'edge' when calling DefaultApi.get_node_edge" if edge.nil?
      # resource path
      local_var_path = "/{uuid}/{edge}".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s).sub('{' + 'edge' + '}', edge.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_node_edge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves the outgoing edges of a node
    # By passing in a node ID, you can fetch  the outgoing edges of the node in question. 
    # @param uuid the node ID
    # @param [Hash] opts the optional parameters
    # @return [Array<NodeEdge>]
    def get_outgoing_edges(uuid, opts = {})
      data, _status_code, _headers = get_outgoing_edges_with_http_info(uuid, opts)
      return data
    end

    # retrieves the outgoing edges of a node
    # By passing in a node ID, you can fetch  the outgoing edges of the node in question. 
    # @param uuid the node ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<NodeEdge>, Fixnum, Hash)>] Array<NodeEdge> data, response status code and response headers
    def get_outgoing_edges_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_outgoing_edges ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.get_outgoing_edges" if uuid.nil?
      # resource path
      local_var_path = "/{uuid}/edges/out".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<NodeEdge>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_outgoing_edges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieves the Space
    # The Space must be a \\Pho\\Lib\\Graph\\Graph object.  This method returns the object type as well as object uuid. Space always comes with the nil ID;  00000000000000000000000000000000, and under normal circumstances its class is always Pho\\Kernel\\Standards\\Space 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def get_space(opts = {})
      data, _status_code, _headers = get_space_with_http_info(opts)
      return data
    end

    # retrieves the Space
    # The Space must be a \\Pho\\Lib\\Graph\\Graph object.  This method returns the object type as well as object uuid. Space always comes with the nil ID;  00000000000000000000000000000000, and under normal circumstances its class is always Pho\\Kernel\\Standards\\Space 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Fixnum, Hash)>] InlineResponse2002 data, response status code and response headers
    def get_space_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_space ..."
      end
      # resource path
      local_var_path = "/space".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2002')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_space\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # fetches entity type
    # Possible values are; \"Space\", \"Node\", \"Graph Node\", \"Graph\", \"Actor Node\" \"Object Node\", \"Edge\", \"Read Edge\", \"Write Edge\", \"Subscribe Edge\", \"Mention Edge\", \"Unidentified\". 
    # @param uuid the node
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_type(uuid, opts = {})
      data, _status_code, _headers = get_type_with_http_info(uuid, opts)
      return data
    end

    # fetches entity type
    # Possible values are; \&quot;Space\&quot;, \&quot;Node\&quot;, \&quot;Graph Node\&quot;, \&quot;Graph\&quot;, \&quot;Actor Node\&quot; \&quot;Object Node\&quot;, \&quot;Edge\&quot;, \&quot;Read Edge\&quot;, \&quot;Write Edge\&quot;, \&quot;Subscribe Edge\&quot;, \&quot;Mention Edge\&quot;, \&quot;Unidentified\&quot;. 
    # @param uuid the node
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_type_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.get_type ..."
      end
      # verify the required parameter 'uuid' is set
      fail ArgumentError, "Missing the required parameter 'uuid' when calling DefaultApi.get_type" if uuid.nil?
      # resource path
      local_var_path = "/{uuid}/type".sub('{format}','json').sub('{' + 'uuid' + '}', uuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # creates an Actor object
    # Fetches whatever set as \"default_object\"=>\"actor\" while determining what Actor object to construct. If it doesn't exist, uses \"default_object\"=>\"founder\" class. Otherwise fails. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :param1 Actor constructor argument. More parameters may be passed via param2, param3 ... param50. 
    # @return [String]
    def make_actor(opts = {})
      data, _status_code, _headers = make_actor_with_http_info(opts)
      return data
    end

    # creates an Actor object
    # Fetches whatever set as \&quot;default_object\&quot;&#x3D;&gt;\&quot;actor\&quot; while determining what Actor object to construct. If it doesn&#39;t exist, uses \&quot;default_object\&quot;&#x3D;&gt;\&quot;founder\&quot; class. Otherwise fails. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :param1 Actor constructor argument. More parameters may be passed via param2, param3 ... param50. 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def make_actor_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.make_actor ..."
      end
      # resource path
      local_var_path = "/actor".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'param1'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#make_actor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # creates an edge
    # Used to set new edges. If the edge is formative, then a node is also formed. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :param1 The value to update the key with. There can be 50 of those. For example;  param1&#x3D;\&quot;value1\&quot;, param2 &#x3D;\&quot;another value\&quot; depending on the edge&#39;s default constructor variable count. 
    # @return [String]
    def make_edge(opts = {})
      data, _status_code, _headers = make_edge_with_http_info(opts)
      return data
    end

    # creates an edge
    # Used to set new edges. If the edge is formative, then a node is also formed. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :param1 The value to update the key with. There can be 50 of those. For example;  param1&#x3D;\&quot;value1\&quot;, param2 &#x3D;\&quot;another value\&quot; depending on the edge&#39;s default constructor variable count. 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def make_edge_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.make_edge ..."
      end
      # resource path
      local_var_path = "/{uuid}/{edge}".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'param1'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#make_edge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates (or creates) an attribute
    # Works with all entities, including nodes and edges. Given its key, updates an  attribute value, or creates it, if it doesn't yet exist. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :value The value to update the key with.
    # @return [InlineResponse2004]
    def set_attribute(opts = {})
      data, _status_code, _headers = set_attribute_with_http_info(opts)
      return data
    end

    # updates (or creates) an attribute
    # Works with all entities, including nodes and edges. Given its key, updates an  attribute value, or creates it, if it doesn&#39;t yet exist. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :value The value to update the key with.
    # @return [Array<(InlineResponse2004, Fixnum, Hash)>] InlineResponse2004 data, response status code and response headers
    def set_attribute_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.set_attribute ..."
      end
      # resource path
      local_var_path = "/{uuid}/attribute/{key}".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'value'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2004')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_attribute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
