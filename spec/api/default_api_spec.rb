=begin
#Social Graph API

#Pho Networks REST API

OpenAPI spec version: 1.1.1
Contact: emre@phonetworks.org
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for PhoClient::DefaultApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @instance = PhoClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instact of DefaultApi' do
      expect(@instance).to be_instance_of(PhoClient::DefaultApi)
    end
  end

  # unit tests for add_attribute
  # updates (or creates) an attribute
  # Works with all entities, including nodes and edges. Given its key, updates an  attribute value, or creates it, if it doesn&#39;t yet exist. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :value The value to update the key with.
  # @return [InlineResponse2004]
  describe 'add_attribute test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for del_attribute
  # deletes an attribute
  # Works with all entities, including nodes and edges. Given its key, deletes an  attribute. 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2004]
  describe 'del_attribute test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for del_entity
  # deletes an entity
  # Works with all entities, including nodes and edges.  
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'del_entity test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_edges
  # retrieves the edges of a node
  # By passing in a node ID, you can fetch all the edges of the node in question; including incoming and outgoing. 
  # @param uuid The node ID
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2003]
  describe 'get_all_edges test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_attribute
  # retrieves the value of an entity attribute
  # Attribute key must be case-sensitive. 
  # @param uuid The node ID
  # @param key The attribute key
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'get_attribute test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_attributes
  # retrieves the existing attribute keys of an entity (edge or node)
  # Attribute keys are case-sensitive, and they will be listed in an array. 
  # @param uuid The node ID
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'get_attributes test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_edge
  # retrieves an edge
  # By passing in an ID, you can search for available edges in the system.  
  # @param uuid The edge ID
  # @param [Hash] opts the optional parameters
  # @return [Edge]
  describe 'get_edge test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_edge_getters
  # retrieves the edge getter methods of a node
  # By passing in a node UUID that exists in the database, you can fetch  the edge getter methods of the node in question. 
  # @param uuid The node ID
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'get_edge_getters test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_edge_setters
  # retrieves the edge setter methods of a node
  # By passing in a node UUID that exists in the database, you can fetch  the edge setter methods of the node in question. These setters may or  may not be formative. If they are formative, a new node is created in result. 
  # @param uuid The node ID
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'get_edge_setters test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_founder
  # retrieves the Graph Founder
  # The Founder must be a \\Pho\\Framework\\Actor object.  This method returns the object type as well as object ID. 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse200]
  describe 'get_founder test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_graph
  # retrieves the main Graph
  # The Graph must be a \\Pho\\Lib\\Graph\\SubGraph and \\Pho\\Framework\\Graph object.  This method returns the object type as well as object ID. The Graph contains all nodes and edges in the system.  Though it is contained by Space, its one and only container. 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2001]
  describe 'get_graph test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_incoming_edges
  # retrieves the incoming edges of a node
  # By passing in a node ID, you can fetch  the incoming edges of the node in question. 
  # @param uuid the node ID
  # @param [Hash] opts the optional parameters
  # @return [Array<NodeEdge>]
  describe 'get_incoming_edges test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_node
  # retrieves a node
  # By passing in an ID, you can search for available nodes in the system. Please note, this function will not return edges. This method  is  reserved for nodes only.  
  # @param uuid The node ID
  # @param [Hash] opts the optional parameters
  # @return [Node]
  describe 'get_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_node_edge
  # edge getter
  # Fetches edge results, whether as edge IDs or node IDs, depending on edge&#39;s characteristics.  
  # @param uuid The node ID
  # @param edge The edge getter label
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'get_node_edge test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_outgoing_edges
  # retrieves the outgoing edges of a node
  # By passing in a node ID, you can fetch  the outgoing edges of the node in question. 
  # @param uuid the node ID
  # @param [Hash] opts the optional parameters
  # @return [Array<NodeEdge>]
  describe 'get_outgoing_edges test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_space
  # retrieves the Space
  # The Space must be a \\Pho\\Lib\\Graph\\Graph object.  This method returns the object type as well as object uuid. Space always comes with the nil ID;  00000000000000000000000000000000, and under normal circumstances its class is always Pho\\Kernel\\Standards\\Space 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2002]
  describe 'get_space test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_type
  # fetches entity type
  # Possible values are; \&quot;Space\&quot;, \&quot;Node\&quot;, \&quot;Graph Node\&quot;, \&quot;Graph\&quot;, \&quot;Actor Node\&quot; \&quot;Object Node\&quot;, \&quot;Edge\&quot;, \&quot;Read Edge\&quot;, \&quot;Write Edge\&quot;, \&quot;Subscribe Edge\&quot;, \&quot;Mention Edge\&quot;, \&quot;Unidentified\&quot;. 
  # @param uuid the node
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'get_type test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for make_actor
  # creates an Actor object
  # Fetches whatever set as \&quot;default_object\&quot;&#x3D;&gt;\&quot;actor\&quot; while determining what Actor object to construct. If it doesn&#39;t exist, uses \&quot;default_object\&quot;&#x3D;&gt;\&quot;founder\&quot; class. Otherwise fails. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :param1 Actor constructor argument. More parameters may be passed via param2, param3 ... param50. 
  # @return [String]
  describe 'make_actor test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for make_edge
  # creates an edge
  # Used to set new edges. If the edge is formative, then a node is also formed. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :param1 The value to update the key with. There can be 50 of those. For example;  param1&#x3D;\&quot;value1\&quot;, param2 &#x3D;\&quot;another value\&quot; depending on the edge&#39;s default constructor variable count. 
  # @return [String]
  describe 'make_edge test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_attribute
  # updates (or creates) an attribute
  # Works with all entities, including nodes and edges. Given its key, updates an  attribute value, or creates it, if it doesn&#39;t yet exist. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :value The value to update the key with.
  # @return [InlineResponse2004]
  describe 'set_attribute test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
